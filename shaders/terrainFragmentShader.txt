#version 400

in vec2 passTextCoords;

out vec4 out_Color;
in vec3 surfaceNormal;
in vec3 toLight;
in vec3 toCamera;
in float visibility;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendmap;

uniform vec3 lightColor;
uniform float reflectivity;
uniform float shineDamper;
uniform vec3 skyColor;

const float levels = 8.0;

void main(void) {

	vec4 blendMapColor = texture(blendmap, passTextCoords);
	
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = passTextCoords * 40.0;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	vec3 unitNormalized = normalize(surfaceNormal);
	vec3 unitLightNormalized = normalize(toLight);
	float lightDot = dot(unitNormalized, unitLightNormalized);
	float brightness = max(lightDot, 0.11);
	float level = floor(brightness * levels);
	brightness = max(level / levels, 0.28);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitCameraVec = normalize(toCamera);
	vec3 lightDirection = -unitLightNormalized;
	vec3 reflectedLight = reflect(lightDirection, unitNormalized);
	
	float specularFactor = dot(reflectedLight, unitCameraVec);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	out_Color = vec4(diffuse, 1.0) * totalColor + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);

}