#version 400

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 passTextCoords;
out vec3 surfaceNormal;
out vec3 toLight;
out vec3 toCamera;

out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

const float density = 0.002;
const float gradient = 4.2;

void main(void) {

	vec4 worldPosition = vec4(position, 1.0) * transformationMatrix;
	vec4 positionRelativeToCamera = worldPosition * viewMatrix;
	gl_Position = positionRelativeToCamera * projectionMatrix;
	passTextCoords = textureCoords;
	
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	toLight = lightPosition - worldPosition.xyz;
	toCamera = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);

}